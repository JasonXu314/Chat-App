{"code":"!function(e){var r={};function s(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,s),n.l=!0,n.exports}s.m=e,s.c=r,s.d=function(e,r,t){s.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:t})},s.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},s.t=function(e,r){if(1&r&&(e=s(e)),8&r)return e;if(4&r&&\"object\"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(s.r(t),Object.defineProperty(t,\"default\",{enumerable:!0,value:e}),2&r&&\"string\"!=typeof e)for(var n in e)s.d(t,n,function(r){return e[r]}.bind(null,n));return t},s.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(r,\"a\",r),r},s.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},s.p=\"\",s(s.s=1)}([function(e,r,s){\"use strict\";e.exports=function(){throw new Error(\"ws does not work in the browser. Browser clients must use the native WebSocket object\")}},function(e,r,s){\"use strict\";s.r(r);var t=s(0);const n=new(s.n(t).a.Server)({port:3e3});let o=new Map,a=new Map,i=[{type:\"message\",sender:\"Server\",message:\"Welcome to the new chatroom!\"}];n.on(\"connection\",e=>{e.on(\"message\",r=>{if(\"registration\"===JSON.parse(r).type)console.log(`New connection: ${JSON.parse(r).name}`),o.set(e,`${JSON.parse(r).name}`),i.forEach(r=>e.send(JSON.stringify(r))),a.forEach((r,s)=>{r.forEach(r=>{e.send(JSON.stringify({type:\"edit\",id:s,newMsg:r}))})}),o.forEach((e,s)=>s.send(JSON.stringify({type:\"join\",user:`${JSON.parse(r).name}`}))),i.push({type:\"join\",user:`${JSON.parse(r).name}`});else if(\"message\"===JSON.parse(r).type)console.log(`Server: recieved '${JSON.parse(r).message}'`),o.forEach((e,s)=>s.send(JSON.stringify({type:\"message\",sender:`${JSON.parse(r).name}`,message:`${JSON.parse(r).message}`,id:JSON.parse(r).id}))),i.push({type:\"message\",sender:`${JSON.parse(r).name}`,message:`${JSON.parse(r).message}`,id:JSON.parse(r).id});else if(\"delete\"===JSON.parse(r).type){let s=i.find(e=>\"message\"===e.type&&e.sender===JSON.parse(r).user&&e.id===JSON.parse(r).id);void 0!==s?(i.splice(i.indexOf(s),1),o.forEach((e,s)=>s.send(JSON.stringify({type:\"delete\",id:JSON.parse(r).id})))):e.send(JSON.stringify({type:\"error\",errormsg:\"Please do not try to delete other peoples' messages!\"}))}else\"edit\"===JSON.parse(r).type?(a.has(JSON.parse(r).id)?a.get(JSON.parse(r).id).push(JSON.parse(r).newMsg):a.set(JSON.parse(r).id,[JSON.parse(r).newMsg]),o.forEach((s,t)=>{t!==e&&t.send(JSON.stringify({type:\"edit\",id:JSON.parse(r).id,newMsg:JSON.parse(r).newMsg,oldMsg:JSON.parse(r).oldMsg}))})):(e.close(),0===o.size&&(i=[{type:\"message\",sender:\"Server\",message:\"Welcome to the new chatroom!\"}],a=new Map))}),e.on(\"close\",()=>{console.log(`${o.get(e)} disconnected`),o.forEach((r,s)=>s.send(JSON.stringify({type:\"disconnect\",user:`${o.get(e)}`}))),i.push({type:\"disconnect\",user:`${o.get(e)}`}),o.delete(e),0===o.size&&(i=[{type:\"message\",sender:\"Server\",message:\"Welcome to the new chatroom!\"}],a=new Map)})}),console.log(\"Server Started\")}]);","extractedComments":[]}